
type Brand @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!

  name: String!
  products: [Product!]! @relation(name: "BrandProducts")
  whereToBuyUrl: String
  allerganStatementUrl: String

  boost: Int! @defaultValue(value: 0)
  isHidden: Boolean! @defaultValue(value: "false")
  notes: String
}


type Product @model {
  id: ID! @isUnique
  upc: String @isUnique
  ean: String @isUnique
  sku: String
  asin: String @isUnique

  slug: String @isUnique

  name: String!
  brand: Brand! @relation(name: "BrandProducts")
  keywords: String
  gfCerts: [GF_CERT!]! @migrationValue(value: "[GFCO]")

  parent: Product @relation(name: "ProductVariations")
  variations: [Product!]! @relation(name: "ProductVariations")
  offers: [Offer!]! @relation(name: "ProductOffers")

  image: String
  amazonImage: String
  size: String
  description: String
  ingredients: String
  facilityStatement: String

  lastVerifiedAt: DateTime
  boost: Int! @defaultValue(value: 0)
  isHidden: Boolean! @defaultValue(value: "false")
  isOrganic: Boolean

  notes: String
  createdAt: DateTime!
  updatedAt: DateTime!
  forceSyncTrigger: String
}


type Offer @model {
  id: ID! @isUnique

  product: Product! @relation(name: "ProductOffers")
  merchant: String!
  isAffiliate: Boolean!
  url: String! @isUnique
  price: Float
  quantity: Int

  createdAt: DateTime!
  updatedAt: DateTime!
  deleteStatus: String
}


enum MATCH_STATUS {
  PENDING
  NEEDS_REVIEW
  MATCHED
  INVALID
  NONE
}

enum MATCH_SCORE {
  UNKNOWN
  PERFECT
  POSSIBLE
  NONE
}

enum GF_CERT {
  GFCO
  GFCP
}
